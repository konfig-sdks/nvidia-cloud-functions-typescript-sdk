/* tslint:disable */
/* eslint-disable */
/*
Cloud Functions

Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

The version of the OpenAPI document: 2.87.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeploymentResponse } from '../models';
// @ts-ignore
import { FunctionDeploymentRequest } from '../models';
// @ts-ignore
import { FunctionResponse } from '../models';
// @ts-ignore
import { GpuSpecificationDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FunctionDeploymentApi - axios parameter creator
 * @export
 */
export const FunctionDeploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes the deployment associated with the specified function. Upon  deletion, any active instances will be terminated, and the function\'s status  will transition to \'INACTIVE\'. To undeploy a function version gracefully,  specify \'graceful=true\' query parameter, allowing current tasks to complete  before terminating the instances. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Delete Function Deployment
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version id
         * @param {boolean} [graceful] Query param to deactivate function for graceful shutdown
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdAndVersion: async (functionId: string, functionVersionId: string, graceful?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteByIdAndVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('deleteByIdAndVersion', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (graceful !== undefined) {
                localVarQueryParameter['graceful'] = graceful;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Account Admins to retrieve the deployment details of the specified  function version. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Get Function Deployment Details
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details: async (functionId: string, functionVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('details', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('details', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates deployment for the specified function version. Upon invocation of  this endpoint, the function\'s status transitions to \'DEPLOYING\'. If the  specified function version is public, then Account Admin cannot perform this  operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Deploy Function
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version id
         * @param {FunctionDeploymentRequest} functionDeploymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateDeploymentForVersion: async (functionId: string, functionVersionId: string, functionDeploymentRequest: FunctionDeploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('initiateDeploymentForVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('initiateDeploymentForVersion', 'functionVersionId', functionVersionId)
            // verify required parameter 'functionDeploymentRequest' is not null or undefined
            assertParamExists('initiateDeploymentForVersion', 'functionDeploymentRequest', functionDeploymentRequest)
            const localVarPath = `/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionDeploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionDeploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the deployment specs of the specified function version. It\'s important  to note that GPU type and backend configurations cannot be modified through  this endpoint. If the specified function is public, then Account Admin cannot  perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Update Function Deployment
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version id
         * @param {FunctionDeploymentRequest} functionDeploymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecs: async (functionId: string, functionVersionId: string, functionDeploymentRequest: FunctionDeploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('updateSpecs', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('updateSpecs', 'functionVersionId', functionVersionId)
            // verify required parameter 'functionDeploymentRequest' is not null or undefined
            assertParamExists('updateSpecs', 'functionDeploymentRequest', functionDeploymentRequest)
            const localVarPath = `/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionDeploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionDeploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FunctionDeploymentApi - functional programming interface
 * @export
 */
export const FunctionDeploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FunctionDeploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes the deployment associated with the specified function. Upon  deletion, any active instances will be terminated, and the function\'s status  will transition to \'INACTIVE\'. To undeploy a function version gracefully,  specify \'graceful=true\' query parameter, allowing current tasks to complete  before terminating the instances. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Delete Function Deployment
         * @param {FunctionDeploymentApiDeleteByIdAndVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByIdAndVersion(requestParameters: FunctionDeploymentApiDeleteByIdAndVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByIdAndVersion(requestParameters.functionId, requestParameters.functionVersionId, requestParameters.graceful, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows Account Admins to retrieve the deployment details of the specified  function version. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Get Function Deployment Details
         * @param {FunctionDeploymentApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async details(requestParameters: FunctionDeploymentApiDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.details(requestParameters.functionId, requestParameters.functionVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates deployment for the specified function version. Upon invocation of  this endpoint, the function\'s status transitions to \'DEPLOYING\'. If the  specified function version is public, then Account Admin cannot perform this  operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Deploy Function
         * @param {FunctionDeploymentApiInitiateDeploymentForVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateDeploymentForVersion(requestParameters: FunctionDeploymentApiInitiateDeploymentForVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentResponse>> {
            const functionDeploymentRequest: FunctionDeploymentRequest = {
                deploymentSpecifications: requestParameters.deploymentSpecifications
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateDeploymentForVersion(requestParameters.functionId, requestParameters.functionVersionId, functionDeploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the deployment specs of the specified function version. It\'s important  to note that GPU type and backend configurations cannot be modified through  this endpoint. If the specified function is public, then Account Admin cannot  perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Update Function Deployment
         * @param {FunctionDeploymentApiUpdateSpecsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecs(requestParameters: FunctionDeploymentApiUpdateSpecsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentResponse>> {
            const functionDeploymentRequest: FunctionDeploymentRequest = {
                deploymentSpecifications: requestParameters.deploymentSpecifications
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecs(requestParameters.functionId, requestParameters.functionVersionId, functionDeploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FunctionDeploymentApi - factory interface
 * @export
 */
export const FunctionDeploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FunctionDeploymentApiFp(configuration)
    return {
        /**
         * Deletes the deployment associated with the specified function. Upon  deletion, any active instances will be terminated, and the function\'s status  will transition to \'INACTIVE\'. To undeploy a function version gracefully,  specify \'graceful=true\' query parameter, allowing current tasks to complete  before terminating the instances. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Delete Function Deployment
         * @param {FunctionDeploymentApiDeleteByIdAndVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdAndVersion(requestParameters: FunctionDeploymentApiDeleteByIdAndVersionRequest, options?: AxiosRequestConfig): AxiosPromise<FunctionResponse> {
            return localVarFp.deleteByIdAndVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Account Admins to retrieve the deployment details of the specified  function version. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Get Function Deployment Details
         * @param {FunctionDeploymentApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details(requestParameters: FunctionDeploymentApiDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentResponse> {
            return localVarFp.details(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates deployment for the specified function version. Upon invocation of  this endpoint, the function\'s status transitions to \'DEPLOYING\'. If the  specified function version is public, then Account Admin cannot perform this  operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Deploy Function
         * @param {FunctionDeploymentApiInitiateDeploymentForVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateDeploymentForVersion(requestParameters: FunctionDeploymentApiInitiateDeploymentForVersionRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentResponse> {
            return localVarFp.initiateDeploymentForVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the deployment specs of the specified function version. It\'s important  to note that GPU type and backend configurations cannot be modified through  this endpoint. If the specified function is public, then Account Admin cannot  perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
         * @summary Update Function Deployment
         * @param {FunctionDeploymentApiUpdateSpecsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecs(requestParameters: FunctionDeploymentApiUpdateSpecsRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentResponse> {
            return localVarFp.updateSpecs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteByIdAndVersion operation in FunctionDeploymentApi.
 * @export
 * @interface FunctionDeploymentApiDeleteByIdAndVersionRequest
 */
export type FunctionDeploymentApiDeleteByIdAndVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionDeploymentApiDeleteByIdAndVersion
    */
    readonly functionId: string
    
    /**
    * Function version id
    * @type {string}
    * @memberof FunctionDeploymentApiDeleteByIdAndVersion
    */
    readonly functionVersionId: string
    
    /**
    * Query param to deactivate function for graceful shutdown
    * @type {boolean}
    * @memberof FunctionDeploymentApiDeleteByIdAndVersion
    */
    readonly graceful?: boolean
    
}

/**
 * Request parameters for details operation in FunctionDeploymentApi.
 * @export
 * @interface FunctionDeploymentApiDetailsRequest
 */
export type FunctionDeploymentApiDetailsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionDeploymentApiDetails
    */
    readonly functionId: string
    
    /**
    * Function version id
    * @type {string}
    * @memberof FunctionDeploymentApiDetails
    */
    readonly functionVersionId: string
    
}

/**
 * Request parameters for initiateDeploymentForVersion operation in FunctionDeploymentApi.
 * @export
 * @interface FunctionDeploymentApiInitiateDeploymentForVersionRequest
 */
export type FunctionDeploymentApiInitiateDeploymentForVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionDeploymentApiInitiateDeploymentForVersion
    */
    readonly functionId: string
    
    /**
    * Function version id
    * @type {string}
    * @memberof FunctionDeploymentApiInitiateDeploymentForVersion
    */
    readonly functionVersionId: string
    
} & FunctionDeploymentRequest

/**
 * Request parameters for updateSpecs operation in FunctionDeploymentApi.
 * @export
 * @interface FunctionDeploymentApiUpdateSpecsRequest
 */
export type FunctionDeploymentApiUpdateSpecsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionDeploymentApiUpdateSpecs
    */
    readonly functionId: string
    
    /**
    * Function version id
    * @type {string}
    * @memberof FunctionDeploymentApiUpdateSpecs
    */
    readonly functionVersionId: string
    
} & FunctionDeploymentRequest

/**
 * FunctionDeploymentApiGenerated - object-oriented interface
 * @export
 * @class FunctionDeploymentApiGenerated
 * @extends {BaseAPI}
 */
export class FunctionDeploymentApiGenerated extends BaseAPI {
    /**
     * Deletes the deployment associated with the specified function. Upon  deletion, any active instances will be terminated, and the function\'s status  will transition to \'INACTIVE\'. To undeploy a function version gracefully,  specify \'graceful=true\' query parameter, allowing current tasks to complete  before terminating the instances. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
     * @summary Delete Function Deployment
     * @param {FunctionDeploymentApiDeleteByIdAndVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionDeploymentApiGenerated
     */
    public deleteByIdAndVersion(requestParameters: FunctionDeploymentApiDeleteByIdAndVersionRequest, options?: AxiosRequestConfig) {
        return FunctionDeploymentApiFp(this.configuration).deleteByIdAndVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Account Admins to retrieve the deployment details of the specified  function version. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
     * @summary Get Function Deployment Details
     * @param {FunctionDeploymentApiDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionDeploymentApiGenerated
     */
    public details(requestParameters: FunctionDeploymentApiDetailsRequest, options?: AxiosRequestConfig) {
        return FunctionDeploymentApiFp(this.configuration).details(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates deployment for the specified function version. Upon invocation of  this endpoint, the function\'s status transitions to \'DEPLOYING\'. If the  specified function version is public, then Account Admin cannot perform this  operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
     * @summary Deploy Function
     * @param {FunctionDeploymentApiInitiateDeploymentForVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionDeploymentApiGenerated
     */
    public initiateDeploymentForVersion(requestParameters: FunctionDeploymentApiInitiateDeploymentForVersionRequest, options?: AxiosRequestConfig) {
        return FunctionDeploymentApiFp(this.configuration).initiateDeploymentForVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the deployment specs of the specified function version. It\'s important  to note that GPU type and backend configurations cannot be modified through  this endpoint. If the specified function is public, then Account Admin cannot  perform this operation. Access to this endpoint mandates a bearer token with \'deploy_function\' scope in the  HTTP Authorization header. 
     * @summary Update Function Deployment
     * @param {FunctionDeploymentApiUpdateSpecsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionDeploymentApiGenerated
     */
    public updateSpecs(requestParameters: FunctionDeploymentApiUpdateSpecsRequest, options?: AxiosRequestConfig) {
        return FunctionDeploymentApiFp(this.configuration).updateSpecs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
