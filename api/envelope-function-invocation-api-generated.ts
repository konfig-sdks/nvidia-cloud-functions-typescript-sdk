/* tslint:disable */
/* eslint-disable */
/*
Cloud Functions

Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

The version of the OpenAPI document: 2.87.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InvokeFunctionRequest } from '../models';
// @ts-ignore
import { InvokeFunctionResponse } from '../models';
// @ts-ignore
import { RequestHeaderDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EnvelopeFunctionInvocationApi - axios parameter creator
 * @export
 */
export const EnvelopeFunctionInvocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {string} functionId 
         * @param {InvokeFunctionRequest} invokeFunctionRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        callFunction: async (functionId: string, invokeFunctionRequest: InvokeFunctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('callFunction', 'functionId', functionId)
            // verify required parameter 'invokeFunctionRequest' is not null or undefined
            assertParamExists('callFunction', 'invokeFunctionRequest', invokeFunctionRequest)
            const localVarPath = `/v2/nvcf/exec/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invokeFunctionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/exec/functions/{functionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invokeFunctionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {string} functionId 
         * @param {string} versionId 
         * @param {InvokeFunctionRequest} invokeFunctionRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        invokeFunction: async (functionId: string, versionId: string, invokeFunctionRequest: InvokeFunctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('invokeFunction', 'functionId', functionId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('invokeFunction', 'versionId', versionId)
            // verify required parameter 'invokeFunctionRequest' is not null or undefined
            assertParamExists('invokeFunction', 'invokeFunctionRequest', invokeFunctionRequest)
            const localVarPath = `/v2/nvcf/exec/functions/{functionId}/versions/{versionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-versionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invokeFunctionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/exec/functions/{functionId}/versions/{versionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invokeFunctionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  \'invoke_function\' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Poll For Result Using Function Invocation Request
         * @param {string} requestId Function invocation request id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        pollForResultUsingFunctionInvocationRequest: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('pollForResultUsingFunctionInvocationRequest', 'requestId', requestId)
            const localVarPath = `/v2/nvcf/exec/status/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId !== undefined ? requestId : `-requestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/exec/status/{requestId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvelopeFunctionInvocationApi - functional programming interface
 * @export
 */
export const EnvelopeFunctionInvocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvelopeFunctionInvocationApiAxiosParamCreator(configuration)
    return {
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {EnvelopeFunctionInvocationApiCallFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async callFunction(requestParameters: EnvelopeFunctionInvocationApiCallFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeFunctionResponse>> {
            const invokeFunctionRequest: InvokeFunctionRequest = {
                requestBody: requestParameters.requestBody,
                requestHeader: requestParameters.requestHeader
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.callFunction(requestParameters.functionId, invokeFunctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {EnvelopeFunctionInvocationApiInvokeFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async invokeFunction(requestParameters: EnvelopeFunctionInvocationApiInvokeFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeFunctionResponse>> {
            const invokeFunctionRequest: InvokeFunctionRequest = {
                requestBody: requestParameters.requestBody,
                requestHeader: requestParameters.requestHeader
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeFunction(requestParameters.functionId, requestParameters.versionId, invokeFunctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  \'invoke_function\' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Poll For Result Using Function Invocation Request
         * @param {EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async pollForResultUsingFunctionInvocationRequest(requestParameters: EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeFunctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollForResultUsingFunctionInvocationRequest(requestParameters.requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvelopeFunctionInvocationApi - factory interface
 * @export
 */
export const EnvelopeFunctionInvocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvelopeFunctionInvocationApiFp(configuration)
    return {
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {EnvelopeFunctionInvocationApiCallFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        callFunction(requestParameters: EnvelopeFunctionInvocationApiCallFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<InvokeFunctionResponse> {
            return localVarFp.callFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Call Function
         * @param {EnvelopeFunctionInvocationApiInvokeFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        invokeFunction(requestParameters: EnvelopeFunctionInvocationApiInvokeFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<InvokeFunctionResponse> {
            return localVarFp.invokeFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  \'invoke_function\' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
         * @summary Poll For Result Using Function Invocation Request
         * @param {EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        pollForResultUsingFunctionInvocationRequest(requestParameters: EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest, options?: AxiosRequestConfig): AxiosPromise<InvokeFunctionResponse> {
            return localVarFp.pollForResultUsingFunctionInvocationRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for callFunction operation in EnvelopeFunctionInvocationApi.
 * @export
 * @interface EnvelopeFunctionInvocationApiCallFunctionRequest
 */
export type EnvelopeFunctionInvocationApiCallFunctionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EnvelopeFunctionInvocationApiCallFunction
    */
    readonly functionId: string
    
} & InvokeFunctionRequest

/**
 * Request parameters for invokeFunction operation in EnvelopeFunctionInvocationApi.
 * @export
 * @interface EnvelopeFunctionInvocationApiInvokeFunctionRequest
 */
export type EnvelopeFunctionInvocationApiInvokeFunctionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EnvelopeFunctionInvocationApiInvokeFunction
    */
    readonly functionId: string
    
    /**
    * 
    * @type {string}
    * @memberof EnvelopeFunctionInvocationApiInvokeFunction
    */
    readonly versionId: string
    
} & InvokeFunctionRequest

/**
 * Request parameters for pollForResultUsingFunctionInvocationRequest operation in EnvelopeFunctionInvocationApi.
 * @export
 * @interface EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest
 */
export type EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest = {
    
    /**
    * Function invocation request id
    * @type {string}
    * @memberof EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequest
    */
    readonly requestId: string
    
}

/**
 * EnvelopeFunctionInvocationApiGenerated - object-oriented interface
 * @export
 * @class EnvelopeFunctionInvocationApiGenerated
 * @extends {BaseAPI}
 */
export class EnvelopeFunctionInvocationApiGenerated extends BaseAPI {
    /**
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @summary Call Function
     * @param {EnvelopeFunctionInvocationApiCallFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EnvelopeFunctionInvocationApiGenerated
     */
    public callFunction(requestParameters: EnvelopeFunctionInvocationApiCallFunctionRequest, options?: AxiosRequestConfig) {
        return EnvelopeFunctionInvocationApiFp(this.configuration).callFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it\'s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with \'invoke_function\'  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload\'s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @summary Call Function
     * @param {EnvelopeFunctionInvocationApiInvokeFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EnvelopeFunctionInvocationApiGenerated
     */
    public invokeFunction(requestParameters: EnvelopeFunctionInvocationApiInvokeFunctionRequest, options?: AxiosRequestConfig) {
        return EnvelopeFunctionInvocationApiFp(this.configuration).invokeFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  \'invoke_function\' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @summary Poll For Result Using Function Invocation Request
     * @param {EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EnvelopeFunctionInvocationApiGenerated
     */
    public pollForResultUsingFunctionInvocationRequest(requestParameters: EnvelopeFunctionInvocationApiPollForResultUsingFunctionInvocationRequestRequest, options?: AxiosRequestConfig) {
        return EnvelopeFunctionInvocationApiFp(this.configuration).pollForResultUsingFunctionInvocationRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
