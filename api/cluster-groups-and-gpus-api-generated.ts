/* tslint:disable */
/* eslint-disable */
/*
Cloud Functions

Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

The version of the OpenAPI document: 2.87.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClusterGroupsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ClusterGroupsAndGPUsApi - axios parameter creator
 * @export
 */
export const ClusterGroupsAndGPUsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Cluster Groups for the current account. The response includes cluster  groups defined specifically in the current account and publicly available  cluster groups such as GFN, OCI, etc. Requires a bearer token with \'list_cluster_groups\' scope in HTTP Authorization header. 
         * @summary List Cluster Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/nvcf/clusterGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/clusterGroups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterGroupsAndGPUsApi - functional programming interface
 * @export
 */
export const ClusterGroupsAndGPUsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClusterGroupsAndGPUsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Cluster Groups for the current account. The response includes cluster  groups defined specifically in the current account and publicly available  cluster groups such as GFN, OCI, etc. Requires a bearer token with \'list_cluster_groups\' scope in HTTP Authorization header. 
         * @summary List Cluster Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClusterGroupsAndGPUsApi - factory interface
 * @export
 */
export const ClusterGroupsAndGPUsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClusterGroupsAndGPUsApiFp(configuration)
    return {
        /**
         * Lists Cluster Groups for the current account. The response includes cluster  groups defined specifically in the current account and publicly available  cluster groups such as GFN, OCI, etc. Requires a bearer token with \'list_cluster_groups\' scope in HTTP Authorization header. 
         * @summary List Cluster Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<ClusterGroupsResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClusterGroupsAndGPUsApiGenerated - object-oriented interface
 * @export
 * @class ClusterGroupsAndGPUsApiGenerated
 * @extends {BaseAPI}
 */
export class ClusterGroupsAndGPUsApiGenerated extends BaseAPI {
    /**
     * Lists Cluster Groups for the current account. The response includes cluster  groups defined specifically in the current account and publicly available  cluster groups such as GFN, OCI, etc. Requires a bearer token with \'list_cluster_groups\' scope in HTTP Authorization header. 
     * @summary List Cluster Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterGroupsAndGPUsApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return ClusterGroupsAndGPUsApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }
}
