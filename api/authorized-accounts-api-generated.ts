/* tslint:disable */
/* eslint-disable */
/*
Cloud Functions

Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

The version of the OpenAPI document: 2.87.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthorizedPartiesRequest } from '../models';
// @ts-ignore
import { AuthorizedPartiesResponse } from '../models';
// @ts-ignore
import { AuthorizedPartyDto } from '../models';
// @ts-ignore
import { ListAuthorizedPartiesResponse } from '../models';
// @ts-ignore
import { PatchAuthorizedPartyRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthorizedAccountsApi - axios parameter creator
 * @export
 */
export const AuthorizedAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function
         * @param {string} functionId Function id
         * @param {PatchAuthorizedPartyRequest} patchAuthorizedPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToFunction: async (functionId: string, patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('addAccountToFunction', 'functionId', functionId)
            // verify required parameter 'patchAuthorizedPartyRequest' is not null or undefined
            assertParamExists('addAccountToFunction', 'patchAuthorizedPartyRequest', patchAuthorizedPartyRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/add`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchAuthorizedPartyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/add',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchAuthorizedPartyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function Version
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version
         * @param {PatchAuthorizedPartyRequest} patchAuthorizedPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToFunctionVersion: async (functionId: string, functionVersionId: string, patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('addAccountToFunctionVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('addAccountToFunctionVersion', 'functionVersionId', functionVersionId)
            // verify required parameter 'patchAuthorizedPartyRequest' is not null or undefined
            assertParamExists('addAccountToFunctionVersion', 'patchAuthorizedPartyRequest', patchAuthorizedPartyRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/add`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchAuthorizedPartyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/add',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchAuthorizedPartyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function Version
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version id
         * @param {AuthorizedPartiesRequest} authorizedPartiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeFunctionAccounts: async (functionId: string, functionVersionId: string, authorizedPartiesRequest: AuthorizedPartiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('authorizeFunctionAccounts', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('authorizeFunctionAccounts', 'functionVersionId', functionVersionId)
            // verify required parameter 'authorizedPartiesRequest' is not null or undefined
            assertParamExists('authorizeFunctionAccounts', 'authorizedPartiesRequest', authorizedPartiesRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authorizedPartiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authorizedPartiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function
         * @param {string} functionId Function id
         * @param {AuthorizedPartiesRequest} authorizedPartiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeFunctionAccounts_1: async (functionId: string, authorizedPartiesRequest: AuthorizedPartiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('authorizeFunctionAccounts_1', 'functionId', functionId)
            // verify required parameter 'authorizedPartiesRequest' is not null or undefined
            assertParamExists('authorizeFunctionAccounts_1', 'authorizedPartiesRequest', authorizedPartiesRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authorizedPartiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authorizedPartiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function
         * @param {string} functionId Function id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllExtraForFunction: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteAllExtraForFunction', 'functionId', functionId)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function Version
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExtraForFunctionVersion: async (functionId: string, functionVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteExtraForFunctionVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('deleteExtraForFunctionVersion', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Get Account Authorizations For Function Version
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionVersionAuthorizations: async (functionId: string, functionVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('functionVersionAuthorizations', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('functionVersionAuthorizations', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary List Account Authorizations For Function
         * @param {string} functionId Function id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForFunction: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listForFunction', 'functionId', functionId)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function
         * @param {string} functionId Function id
         * @param {PatchAuthorizedPartyRequest} patchAuthorizedPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFunctionAuthorization: async (functionId: string, patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('removeFromFunctionAuthorization', 'functionId', functionId)
            // verify required parameter 'patchAuthorizedPartyRequest' is not null or undefined
            assertParamExists('removeFromFunctionAuthorization', 'patchAuthorizedPartyRequest', patchAuthorizedPartyRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/remove`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchAuthorizedPartyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/remove',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchAuthorizedPartyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function Version
         * @param {string} functionId Function id
         * @param {string} functionVersionId Function version
         * @param {PatchAuthorizedPartyRequest} patchAuthorizedPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePartyForVersion: async (functionId: string, functionVersionId: string, patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('removePartyForVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('removePartyForVersion', 'functionVersionId', functionVersionId)
            // verify required parameter 'patchAuthorizedPartyRequest' is not null or undefined
            assertParamExists('removePartyForVersion', 'patchAuthorizedPartyRequest', patchAuthorizedPartyRequest)
            const localVarPath = `/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/remove`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchAuthorizedPartyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/remove',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchAuthorizedPartyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizedAccountsApi - functional programming interface
 * @export
 */
export const AuthorizedAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizedAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function
         * @param {AuthorizedAccountsApiAddAccountToFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountToFunction(requestParameters: AuthorizedAccountsApiAddAccountToFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest = {
                authorizedParty: requestParameters.authorizedParty
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccountToFunction(requestParameters.functionId, patchAuthorizedPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function Version
         * @param {AuthorizedAccountsApiAddAccountToFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountToFunctionVersion(requestParameters: AuthorizedAccountsApiAddAccountToFunctionVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest = {
                authorizedParty: requestParameters.authorizedParty
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccountToFunctionVersion(requestParameters.functionId, requestParameters.functionVersionId, patchAuthorizedPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function Version
         * @param {AuthorizedAccountsApiAuthorizeFunctionAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeFunctionAccounts(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const authorizedPartiesRequest: AuthorizedPartiesRequest = {
                authorizedParties: requestParameters.authorizedParties
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeFunctionAccounts(requestParameters.functionId, requestParameters.functionVersionId, authorizedPartiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function
         * @param {AuthorizedAccountsApiAuthorizeFunctionAccounts0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeFunctionAccounts_1(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccounts0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const authorizedPartiesRequest: AuthorizedPartiesRequest = {
                authorizedParties: requestParameters.authorizedParties
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeFunctionAccounts_1(requestParameters.functionId, authorizedPartiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function
         * @param {AuthorizedAccountsApiDeleteAllExtraForFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllExtraForFunction(requestParameters: AuthorizedAccountsApiDeleteAllExtraForFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllExtraForFunction(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function Version
         * @param {AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExtraForFunctionVersion(requestParameters: AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExtraForFunctionVersion(requestParameters.functionId, requestParameters.functionVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Get Account Authorizations For Function Version
         * @param {AuthorizedAccountsApiFunctionVersionAuthorizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async functionVersionAuthorizations(requestParameters: AuthorizedAccountsApiFunctionVersionAuthorizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.functionVersionAuthorizations(requestParameters.functionId, requestParameters.functionVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary List Account Authorizations For Function
         * @param {AuthorizedAccountsApiListForFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForFunction(requestParameters: AuthorizedAccountsApiListForFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAuthorizedPartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForFunction(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function
         * @param {AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromFunctionAuthorization(requestParameters: AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest = {
                authorizedParty: requestParameters.authorizedParty
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromFunctionAuthorization(requestParameters.functionId, patchAuthorizedPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function Version
         * @param {AuthorizedAccountsApiRemovePartyForVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePartyForVersion(requestParameters: AuthorizedAccountsApiRemovePartyForVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedPartiesResponse>> {
            const patchAuthorizedPartyRequest: PatchAuthorizedPartyRequest = {
                authorizedParty: requestParameters.authorizedParty
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePartyForVersion(requestParameters.functionId, requestParameters.functionVersionId, patchAuthorizedPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizedAccountsApi - factory interface
 * @export
 */
export const AuthorizedAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizedAccountsApiFp(configuration)
    return {
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function
         * @param {AuthorizedAccountsApiAddAccountToFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToFunction(requestParameters: AuthorizedAccountsApiAddAccountToFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.addAccountToFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Additional Account To Invoke Function Version
         * @param {AuthorizedAccountsApiAddAccountToFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToFunctionVersion(requestParameters: AuthorizedAccountsApiAddAccountToFunctionVersionRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.addAccountToFunctionVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function Version
         * @param {AuthorizedAccountsApiAuthorizeFunctionAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeFunctionAccounts(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.authorizeFunctionAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Authorize Accounts To Invoke Function
         * @param {AuthorizedAccountsApiAuthorizeFunctionAccounts0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeFunctionAccounts_1(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccounts0Request, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.authorizeFunctionAccounts_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function
         * @param {AuthorizedAccountsApiDeleteAllExtraForFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllExtraForFunction(requestParameters: AuthorizedAccountsApiDeleteAllExtraForFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.deleteAllExtraForFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Delete All Extra Authorizations For Function Version
         * @param {AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExtraForFunctionVersion(requestParameters: AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.deleteExtraForFunctionVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Get Account Authorizations For Function Version
         * @param {AuthorizedAccountsApiFunctionVersionAuthorizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionVersionAuthorizations(requestParameters: AuthorizedAccountsApiFunctionVersionAuthorizationsRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.functionVersionAuthorizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary List Account Authorizations For Function
         * @param {AuthorizedAccountsApiListForFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForFunction(requestParameters: AuthorizedAccountsApiListForFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<ListAuthorizedPartiesResponse> {
            return localVarFp.listForFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function
         * @param {AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFunctionAuthorization(requestParameters: AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.removeFromFunctionAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
         * @summary Unauthorize Account From Invoking Function Version
         * @param {AuthorizedAccountsApiRemovePartyForVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePartyForVersion(requestParameters: AuthorizedAccountsApiRemovePartyForVersionRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedPartiesResponse> {
            return localVarFp.removePartyForVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAccountToFunction operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiAddAccountToFunctionRequest
 */
export type AuthorizedAccountsApiAddAccountToFunctionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiAddAccountToFunction
    */
    readonly functionId: string
    
} & PatchAuthorizedPartyRequest

/**
 * Request parameters for addAccountToFunctionVersion operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiAddAccountToFunctionVersionRequest
 */
export type AuthorizedAccountsApiAddAccountToFunctionVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiAddAccountToFunctionVersion
    */
    readonly functionId: string
    
    /**
    * Function version
    * @type {string}
    * @memberof AuthorizedAccountsApiAddAccountToFunctionVersion
    */
    readonly functionVersionId: string
    
} & PatchAuthorizedPartyRequest

/**
 * Request parameters for authorizeFunctionAccounts operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiAuthorizeFunctionAccountsRequest
 */
export type AuthorizedAccountsApiAuthorizeFunctionAccountsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiAuthorizeFunctionAccounts
    */
    readonly functionId: string
    
    /**
    * Function version id
    * @type {string}
    * @memberof AuthorizedAccountsApiAuthorizeFunctionAccounts
    */
    readonly functionVersionId: string
    
} & AuthorizedPartiesRequest

/**
 * Request parameters for authorizeFunctionAccounts_1 operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiAuthorizeFunctionAccounts0Request
 */
export type AuthorizedAccountsApiAuthorizeFunctionAccounts0Request = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiAuthorizeFunctionAccounts0
    */
    readonly functionId: string
    
} & AuthorizedPartiesRequest

/**
 * Request parameters for deleteAllExtraForFunction operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiDeleteAllExtraForFunctionRequest
 */
export type AuthorizedAccountsApiDeleteAllExtraForFunctionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiDeleteAllExtraForFunction
    */
    readonly functionId: string
    
}

/**
 * Request parameters for deleteExtraForFunctionVersion operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest
 */
export type AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiDeleteExtraForFunctionVersion
    */
    readonly functionId: string
    
    /**
    * Function version
    * @type {string}
    * @memberof AuthorizedAccountsApiDeleteExtraForFunctionVersion
    */
    readonly functionVersionId: string
    
}

/**
 * Request parameters for functionVersionAuthorizations operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiFunctionVersionAuthorizationsRequest
 */
export type AuthorizedAccountsApiFunctionVersionAuthorizationsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiFunctionVersionAuthorizations
    */
    readonly functionId: string
    
    /**
    * Function version
    * @type {string}
    * @memberof AuthorizedAccountsApiFunctionVersionAuthorizations
    */
    readonly functionVersionId: string
    
}

/**
 * Request parameters for listForFunction operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiListForFunctionRequest
 */
export type AuthorizedAccountsApiListForFunctionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiListForFunction
    */
    readonly functionId: string
    
}

/**
 * Request parameters for removeFromFunctionAuthorization operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest
 */
export type AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiRemoveFromFunctionAuthorization
    */
    readonly functionId: string
    
} & PatchAuthorizedPartyRequest

/**
 * Request parameters for removePartyForVersion operation in AuthorizedAccountsApi.
 * @export
 * @interface AuthorizedAccountsApiRemovePartyForVersionRequest
 */
export type AuthorizedAccountsApiRemovePartyForVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof AuthorizedAccountsApiRemovePartyForVersion
    */
    readonly functionId: string
    
    /**
    * Function version
    * @type {string}
    * @memberof AuthorizedAccountsApiRemovePartyForVersion
    */
    readonly functionVersionId: string
    
} & PatchAuthorizedPartyRequest

/**
 * AuthorizedAccountsApiGenerated - object-oriented interface
 * @export
 * @class AuthorizedAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AuthorizedAccountsApiGenerated extends BaseAPI {
    /**
     * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Authorize Additional Account To Invoke Function
     * @param {AuthorizedAccountsApiAddAccountToFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public addAccountToFunction(requestParameters: AuthorizedAccountsApiAddAccountToFunctionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).addAccountToFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Authorize Additional Account To Invoke Function Version
     * @param {AuthorizedAccountsApiAddAccountToFunctionVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public addAccountToFunctionVersion(requestParameters: AuthorizedAccountsApiAddAccountToFunctionVersionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).addAccountToFunctionVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Authorize Accounts To Invoke Function Version
     * @param {AuthorizedAccountsApiAuthorizeFunctionAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public authorizeFunctionAccounts(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccountsRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).authorizeFunctionAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Authorize Accounts To Invoke Function
     * @param {AuthorizedAccountsApiAuthorizeFunctionAccounts0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public authorizeFunctionAccounts_1(requestParameters: AuthorizedAccountsApiAuthorizeFunctionAccounts0Request, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).authorizeFunctionAccounts_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Delete All Extra Authorizations For Function
     * @param {AuthorizedAccountsApiDeleteAllExtraForFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public deleteAllExtraForFunction(requestParameters: AuthorizedAccountsApiDeleteAllExtraForFunctionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).deleteAllExtraForFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Delete All Extra Authorizations For Function Version
     * @param {AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public deleteExtraForFunctionVersion(requestParameters: AuthorizedAccountsApiDeleteExtraForFunctionVersionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).deleteExtraForFunctionVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Get Account Authorizations For Function Version
     * @param {AuthorizedAccountsApiFunctionVersionAuthorizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public functionVersionAuthorizations(requestParameters: AuthorizedAccountsApiFunctionVersionAuthorizationsRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).functionVersionAuthorizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary List Account Authorizations For Function
     * @param {AuthorizedAccountsApiListForFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public listForFunction(requestParameters: AuthorizedAccountsApiListForFunctionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).listForFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Unauthorize Account From Invoking Function
     * @param {AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public removeFromFunctionAuthorization(requestParameters: AuthorizedAccountsApiRemoveFromFunctionAuthorizationRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).removeFromFunctionAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  \'authorize_clients\' scope in the HTTP Authorization header 
     * @summary Unauthorize Account From Invoking Function Version
     * @param {AuthorizedAccountsApiRemovePartyForVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAccountsApiGenerated
     */
    public removePartyForVersion(requestParameters: AuthorizedAccountsApiRemovePartyForVersionRequest, options?: AxiosRequestConfig) {
        return AuthorizedAccountsApiFp(this.configuration).removePartyForVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
