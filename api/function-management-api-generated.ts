/* tslint:disable */
/* eslint-disable */
/*
Cloud Functions

Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

The version of the OpenAPI document: 2.87.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArtifactDto } from '../models';
// @ts-ignore
import { ContainerEnvironmentEntryDto } from '../models';
// @ts-ignore
import { CreateFunctionRequest } from '../models';
// @ts-ignore
import { CreateFunctionResponse } from '../models';
// @ts-ignore
import { FunctionResponse } from '../models';
// @ts-ignore
import { ListFunctionIdsResponse } from '../models';
// @ts-ignore
import { ListFunctionsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FunctionManagementApi - axios parameter creator
 * @export
 */
export const FunctionManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with \'register_function\' scope in the  HTTP Authorization header. 
         * @summary Create Function Version
         * @param {string} functionId Function id
         * @param {CreateFunctionRequest} createFunctionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFunctionVersion: async (functionId: string, createFunctionRequest: CreateFunctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('createFunctionVersion', 'functionId', functionId)
            // verify required parameter 'createFunctionRequest' is not null or undefined
            assertParamExists('createFunctionVersion', 'createFunctionRequest', createFunctionRequest)
            const localVarPath = `/v2/nvcf/functions/{functionId}/versions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createFunctionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions/{functionId}/versions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createFunctionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with \'delete_function\' scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. 
         * @summary Delete Function
         * @param {string} functionId Function id
         * @param {string} functionVersionId Version id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunctionVersion: async (functionId: string, functionVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteFunctionVersion', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('deleteFunctionVersion', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with \'list_functions\' or \'list_functions_details\' scopes in the HTTP  Authorization header. 
         * @summary Get Function Version Details
         * @param {string} functionId Function id
         * @param {string} functionVersionId Version id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionDetails: async (functionId: string, functionVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getVersionDetails', 'functionId', functionId)
            // verify required parameter 'functionVersionId' is not null or undefined
            assertParamExists('getVersionDetails', 'functionVersionId', functionVersionId)
            const localVarPath = `/v2/nvcf/functions/{functionId}/versions/{functionVersionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"functionVersionId"}}`, encodeURIComponent(String(functionVersionId !== undefined ? functionVersionId : `-functionVersionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions/{functionId}/versions/{functionVersionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header. 
         * @summary List Function Ids
         * @param {Set<'authorized' | 'private' | 'public'>} [visibility] Query param \&#39;visibility\&#39; indicates the kind of functions to be included  in the response. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionIds: async (visibility?: Set<'authorized' | 'private' | 'public'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/nvcf/functions/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (visibility) {
                localVarQueryParameter['visibility'] = Array.from(visibility);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions/ids',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  \'list_functions\' or \'list_functions_details\' scopes in the HTTP Authorization  header. 
         * @summary List Function Versions
         * @param {string} functionId Function id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionVersions: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listFunctionVersions', 'functionId', functionId)
            const localVarPath = `/v2/nvcf/functions/{functionId}/versions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions/{functionId}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header.
         * @summary List Functions
         * @param {Set<'authorized' | 'private' | 'public'>} [visibility] Query param \&#39;visibility\&#39; indicates the kind of functions to be included  in the response. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctions: async (visibility?: Set<'authorized' | 'private' | 'public'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/nvcf/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (visibility) {
                localVarQueryParameter['visibility'] = Array.from(visibility);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with \'register_function\' scope in the HTTP Authorization header. 
         * @summary Create Function
         * @param {CreateFunctionRequest} createFunctionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewFunction: async (createFunctionRequest: CreateFunctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFunctionRequest' is not null or undefined
            assertParamExists('registerNewFunction', 'createFunctionRequest', createFunctionRequest)
            const localVarPath = `/v2/nvcf/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createFunctionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/nvcf/functions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createFunctionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FunctionManagementApi - functional programming interface
 * @export
 */
export const FunctionManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FunctionManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with \'register_function\' scope in the  HTTP Authorization header. 
         * @summary Create Function Version
         * @param {FunctionManagementApiCreateFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFunctionVersion(requestParameters: FunctionManagementApiCreateFunctionVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFunctionResponse>> {
            const createFunctionRequest: CreateFunctionRequest = {
                name: requestParameters.name,
                inferenceUrl: requestParameters.inferenceUrl,
                healthUri: requestParameters.healthUri,
                inferencePort: requestParameters.inferencePort,
                containerArgs: requestParameters.containerArgs,
                containerEnvironment: requestParameters.containerEnvironment,
                models: requestParameters.models,
                containerImage: requestParameters.containerImage,
                helmChart: requestParameters.helmChart,
                helmChartServiceName: requestParameters.helmChartServiceName,
                resources: requestParameters.resources,
                apiBodyFormat: requestParameters.apiBodyFormat
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFunctionVersion(requestParameters.functionId, createFunctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with \'delete_function\' scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. 
         * @summary Delete Function
         * @param {FunctionManagementApiDeleteFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFunctionVersion(requestParameters: FunctionManagementApiDeleteFunctionVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFunctionVersion(requestParameters.functionId, requestParameters.functionVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with \'list_functions\' or \'list_functions_details\' scopes in the HTTP  Authorization header. 
         * @summary Get Function Version Details
         * @param {FunctionManagementApiGetVersionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionDetails(requestParameters: FunctionManagementApiGetVersionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionDetails(requestParameters.functionId, requestParameters.functionVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header. 
         * @summary List Function Ids
         * @param {FunctionManagementApiListFunctionIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFunctionIds(requestParameters: FunctionManagementApiListFunctionIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFunctionIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFunctionIds(requestParameters.visibility, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  \'list_functions\' or \'list_functions_details\' scopes in the HTTP Authorization  header. 
         * @summary List Function Versions
         * @param {FunctionManagementApiListFunctionVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFunctionVersions(requestParameters: FunctionManagementApiListFunctionVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFunctionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFunctionVersions(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header.
         * @summary List Functions
         * @param {FunctionManagementApiListFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFunctions(requestParameters: FunctionManagementApiListFunctionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFunctionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFunctions(requestParameters.visibility, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with \'register_function\' scope in the HTTP Authorization header. 
         * @summary Create Function
         * @param {FunctionManagementApiRegisterNewFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewFunction(requestParameters: FunctionManagementApiRegisterNewFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFunctionResponse>> {
            const createFunctionRequest: CreateFunctionRequest = {
                name: requestParameters.name,
                inferenceUrl: requestParameters.inferenceUrl,
                healthUri: requestParameters.healthUri,
                inferencePort: requestParameters.inferencePort,
                containerArgs: requestParameters.containerArgs,
                containerEnvironment: requestParameters.containerEnvironment,
                models: requestParameters.models,
                containerImage: requestParameters.containerImage,
                helmChart: requestParameters.helmChart,
                helmChartServiceName: requestParameters.helmChartServiceName,
                resources: requestParameters.resources,
                apiBodyFormat: requestParameters.apiBodyFormat
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewFunction(createFunctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FunctionManagementApi - factory interface
 * @export
 */
export const FunctionManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FunctionManagementApiFp(configuration)
    return {
        /**
         * Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with \'register_function\' scope in the  HTTP Authorization header. 
         * @summary Create Function Version
         * @param {FunctionManagementApiCreateFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFunctionVersion(requestParameters: FunctionManagementApiCreateFunctionVersionRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFunctionResponse> {
            return localVarFp.createFunctionVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with \'delete_function\' scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. 
         * @summary Delete Function
         * @param {FunctionManagementApiDeleteFunctionVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunctionVersion(requestParameters: FunctionManagementApiDeleteFunctionVersionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFunctionVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with \'list_functions\' or \'list_functions_details\' scopes in the HTTP  Authorization header. 
         * @summary Get Function Version Details
         * @param {FunctionManagementApiGetVersionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionDetails(requestParameters: FunctionManagementApiGetVersionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FunctionResponse> {
            return localVarFp.getVersionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header. 
         * @summary List Function Ids
         * @param {FunctionManagementApiListFunctionIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionIds(requestParameters: FunctionManagementApiListFunctionIdsRequest, options?: AxiosRequestConfig): AxiosPromise<ListFunctionIdsResponse> {
            return localVarFp.listFunctionIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  \'list_functions\' or \'list_functions_details\' scopes in the HTTP Authorization  header. 
         * @summary List Function Versions
         * @param {FunctionManagementApiListFunctionVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctionVersions(requestParameters: FunctionManagementApiListFunctionVersionsRequest, options?: AxiosRequestConfig): AxiosPromise<ListFunctionsResponse> {
            return localVarFp.listFunctionVersions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header.
         * @summary List Functions
         * @param {FunctionManagementApiListFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctions(requestParameters: FunctionManagementApiListFunctionsRequest, options?: AxiosRequestConfig): AxiosPromise<ListFunctionsResponse> {
            return localVarFp.listFunctions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with \'register_function\' scope in the HTTP Authorization header. 
         * @summary Create Function
         * @param {FunctionManagementApiRegisterNewFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewFunction(requestParameters: FunctionManagementApiRegisterNewFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFunctionResponse> {
            return localVarFp.registerNewFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFunctionVersion operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiCreateFunctionVersionRequest
 */
export type FunctionManagementApiCreateFunctionVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionManagementApiCreateFunctionVersion
    */
    readonly functionId: string
    
} & CreateFunctionRequest

/**
 * Request parameters for deleteFunctionVersion operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiDeleteFunctionVersionRequest
 */
export type FunctionManagementApiDeleteFunctionVersionRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionManagementApiDeleteFunctionVersion
    */
    readonly functionId: string
    
    /**
    * Version id
    * @type {string}
    * @memberof FunctionManagementApiDeleteFunctionVersion
    */
    readonly functionVersionId: string
    
}

/**
 * Request parameters for getVersionDetails operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiGetVersionDetailsRequest
 */
export type FunctionManagementApiGetVersionDetailsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionManagementApiGetVersionDetails
    */
    readonly functionId: string
    
    /**
    * Version id 
    * @type {string}
    * @memberof FunctionManagementApiGetVersionDetails
    */
    readonly functionVersionId: string
    
}

/**
 * Request parameters for listFunctionIds operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiListFunctionIdsRequest
 */
export type FunctionManagementApiListFunctionIdsRequest = {
    
    /**
    * Query param \'visibility\' indicates the kind of functions to be included  in the response. 
    * @type {Set<'authorized' | 'private' | 'public'>}
    * @memberof FunctionManagementApiListFunctionIds
    */
    readonly visibility?: Set<'authorized' | 'private' | 'public'>
    
}

/**
 * Request parameters for listFunctionVersions operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiListFunctionVersionsRequest
 */
export type FunctionManagementApiListFunctionVersionsRequest = {
    
    /**
    * Function id
    * @type {string}
    * @memberof FunctionManagementApiListFunctionVersions
    */
    readonly functionId: string
    
}

/**
 * Request parameters for listFunctions operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiListFunctionsRequest
 */
export type FunctionManagementApiListFunctionsRequest = {
    
    /**
    * Query param \'visibility\' indicates the kind of functions to be included  in the response. 
    * @type {Set<'authorized' | 'private' | 'public'>}
    * @memberof FunctionManagementApiListFunctions
    */
    readonly visibility?: Set<'authorized' | 'private' | 'public'>
    
}

/**
 * Request parameters for registerNewFunction operation in FunctionManagementApi.
 * @export
 * @interface FunctionManagementApiRegisterNewFunctionRequest
 */
export type FunctionManagementApiRegisterNewFunctionRequest = {
    
} & CreateFunctionRequest

/**
 * FunctionManagementApiGenerated - object-oriented interface
 * @export
 * @class FunctionManagementApiGenerated
 * @extends {BaseAPI}
 */
export class FunctionManagementApiGenerated extends BaseAPI {
    /**
     * Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with \'register_function\' scope in the  HTTP Authorization header. 
     * @summary Create Function Version
     * @param {FunctionManagementApiCreateFunctionVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public createFunctionVersion(requestParameters: FunctionManagementApiCreateFunctionVersionRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).createFunctionVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with \'delete_function\' scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. 
     * @summary Delete Function
     * @param {FunctionManagementApiDeleteFunctionVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public deleteFunctionVersion(requestParameters: FunctionManagementApiDeleteFunctionVersionRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).deleteFunctionVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with \'list_functions\' or \'list_functions_details\' scopes in the HTTP  Authorization header. 
     * @summary Get Function Version Details
     * @param {FunctionManagementApiGetVersionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public getVersionDetails(requestParameters: FunctionManagementApiGetVersionDetailsRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).getVersionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header. 
     * @summary List Function Ids
     * @param {FunctionManagementApiListFunctionIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public listFunctionIds(requestParameters: FunctionManagementApiListFunctionIdsRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).listFunctionIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  \'list_functions\' or \'list_functions_details\' scopes in the HTTP Authorization  header. 
     * @summary List Function Versions
     * @param {FunctionManagementApiListFunctionVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public listFunctionVersions(requestParameters: FunctionManagementApiListFunctionVersionsRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).listFunctionVersions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with \'list_functions\' or  \'list_functions_details\' scopes in the HTTP Authorization header.
     * @summary List Functions
     * @param {FunctionManagementApiListFunctionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public listFunctions(requestParameters: FunctionManagementApiListFunctionsRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).listFunctions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with \'register_function\' scope in the HTTP Authorization header. 
     * @summary Create Function
     * @param {FunctionManagementApiRegisterNewFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionManagementApiGenerated
     */
    public registerNewFunction(requestParameters: FunctionManagementApiRegisterNewFunctionRequest, options?: AxiosRequestConfig) {
        return FunctionManagementApiFp(this.configuration).registerNewFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
